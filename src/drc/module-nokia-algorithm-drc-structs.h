/*
   This file has been generated by IDA.
   It contains local type definitions from
   module-nokia-algorithm-drc.idb
*/

#define __int8 char
#define __int16 short
#define __int32 int
#define __int64 long long

struct _IO_marker;
struct pa_io_event;
struct pa_time_event;
struct pa_defer_event;
struct pa_memchunk;
struct pa_memblock;
struct pa_idxset;
struct pa_hashmap;
struct pa_source;
struct pa_module;
struct lt__handle;
struct pa_card;
struct pa_card_profile;
struct pa_sink;
struct pa_sink_input;
struct pa_client;
struct pa_resampler;
struct pa_memblockq;
struct pa_asyncmsgq;
struct pa_device_port;
struct pa_rtpoll;
struct pa_sink_volume_change;
struct pa_subscription;
struct pa_subscription_event;
struct pa_mempool;
struct pa_hook_slot;

/* 1 */
typedef __int64 __quad_t;

/* 2 */
typedef int __off_t;

/* 3 */
typedef __quad_t __off64_t;

/* 4 */
typedef int __time_t;

/* 5 */
typedef int __suseconds_t;

/* 6 */
typedef unsigned int size_t;

/* 7 */
typedef __int16 int16_t;

/* 8 */
typedef int int32_t;

/* 9 */
typedef __int64 int64_t;

/* 10 */
struct timeval
{
  __time_t tv_sec;
  __suseconds_t tv_usec;
};

/* 11 */
typedef int16_t int16;

/* 12 */
typedef int32_t int32;

/* 14 */
struct pa_proplist
{
  __int8 dummy[1];
};

/* 13 */
typedef pa_proplist pa_proplist_0;

/* 17 */
typedef void _IO_lock_t;

/* 15 */
struct _IO_FILE
{
  int _flags;
  unsigned __int8 *_IO_read_ptr;
  unsigned __int8 *_IO_read_end;
  unsigned __int8 *_IO_read_base;
  unsigned __int8 *_IO_write_base;
  unsigned __int8 *_IO_write_ptr;
  unsigned __int8 *_IO_write_end;
  unsigned __int8 *_IO_buf_base;
  unsigned __int8 *_IO_buf_end;
  unsigned __int8 *_IO_save_base;
  unsigned __int8 *_IO_backup_base;
  unsigned __int8 *_IO_save_end;
  _IO_marker *_markers;
  _IO_FILE *_chain;
  int _fileno;
  int _flags2;
  __off_t _old_offset;
  unsigned __int16 _cur_column;
  char _vtable_offset;
  unsigned __int8 _shortbuf[1];
  _IO_lock_t *_lock;
  __off64_t _offset;
  void *__pad1;
  void *__pad2;
  void *__pad3;
  void *__pad4;
  size_t __pad5;
  int _mode;
  unsigned __int8 _unused2[40];
};

/* 16 */
struct _IO_marker
{
  _IO_marker *_next;
  _IO_FILE *_sbuf;
  int _pos;
};

/* 19 */
typedef bool _Bool;

/* 18 */
typedef _Bool pa_bool_t;

/* 20 */
enum pa_log_level : __int32
{
  PA_LOG_ERROR = 0x0,
  PA_LOG_WARN = 0x1,
  PA_LOG_NOTICE = 0x2,
  PA_LOG_INFO = 0x3,
  PA_LOG_DEBUG = 0x4,
  PA_LOG_LEVEL_MAX = 0x5,
};

/* 21 */
typedef unsigned __int8 uint8_t;

/* 22 */
typedef unsigned int uint32_t;

/* 23 */
typedef unsigned __int64 uint64_t;

/* 24 */
enum pa_sample_format : __int32
{
  PA_SAMPLE_U8 = 0x0,
  PA_SAMPLE_ALAW = 0x1,
  PA_SAMPLE_ULAW = 0x2,
  PA_SAMPLE_S16LE = 0x3,
  PA_SAMPLE_S16BE = 0x4,
  PA_SAMPLE_FLOAT32LE = 0x5,
  PA_SAMPLE_FLOAT32BE = 0x6,
  PA_SAMPLE_S32LE = 0x7,
  PA_SAMPLE_S32BE = 0x8,
  PA_SAMPLE_S24LE = 0x9,
  PA_SAMPLE_S24BE = 0xA,
  PA_SAMPLE_S24_32LE = 0xB,
  PA_SAMPLE_S24_32BE = 0xC,
  PA_SAMPLE_MAX = 0xD,
  PA_SAMPLE_INVALID = 0xFFFFFFFF,
};

/* 25 */
typedef pa_sample_format pa_sample_format_t;

/* 26 */
struct __attribute__((aligned(4))) pa_sample_spec
{
  pa_sample_format_t format;
  uint32_t rate;
  uint8_t channels;
};

/* 27 */
typedef pa_sample_spec pa_sample_spec_0;

/* 28 */
typedef uint64_t pa_usec_t;

/* 31 */
typedef pa_io_event pa_io_event_0;

/* 34 */
enum pa_io_event_flags : __int32
{
  PA_IO_EVENT_NULL = 0x0,
  PA_IO_EVENT_INPUT = 0x1,
  PA_IO_EVENT_OUTPUT = 0x2,
  PA_IO_EVENT_HANGUP = 0x4,
  PA_IO_EVENT_ERROR = 0x8,
};

/* 33 */
typedef pa_io_event_flags pa_io_event_flags_t;

/* 35 */
typedef void (*pa_io_event_cb_t)(pa_mainloop_api_0 *, pa_io_event_0 *, int, pa_io_event_flags_t, void *);

/* 36 */
typedef void (*pa_io_event_destroy_cb_t)(pa_mainloop_api_0 *, pa_io_event_0 *, void *);

/* 37 */
typedef pa_time_event pa_time_event_0;

/* 39 */
typedef void (*pa_time_event_cb_t)(pa_mainloop_api_0 *, pa_time_event_0 *, const timeval *, void *);

/* 40 */
typedef void (*pa_time_event_destroy_cb_t)(pa_mainloop_api_0 *, pa_time_event_0 *, void *);

/* 41 */
typedef pa_defer_event pa_defer_event_0;

/* 43 */
typedef void (*pa_defer_event_cb_t)(pa_mainloop_api_0 *, pa_defer_event_0 *, void *);

/* 44 */
typedef void (*pa_defer_event_destroy_cb_t)(pa_mainloop_api_0 *, pa_defer_event_0 *, void *);

/* 30 */
struct pa_mainloop_api
{
  void *userdata;
  pa_io_event_0 *(*io_new)(pa_mainloop_api_0 *, int, pa_io_event_flags_t, pa_io_event_cb_t, void *);
  void (*io_enable)(pa_io_event_0 *, pa_io_event_flags_t);
  void (*io_free)(pa_io_event_0 *);
  void (*io_set_destroy)(pa_io_event_0 *, pa_io_event_destroy_cb_t);
  pa_time_event_0 *(*time_new)(pa_mainloop_api_0 *, const timeval *, pa_time_event_cb_t, void *);
  void (*time_restart)(pa_time_event_0 *, const timeval *);
  void (*time_free)(pa_time_event_0 *);
  void (*time_set_destroy)(pa_time_event_0 *, pa_time_event_destroy_cb_t);
  pa_defer_event_0 *(*defer_new)(pa_mainloop_api_0 *, pa_defer_event_cb_t, void *);
  void (*defer_enable)(pa_defer_event_0 *, int);
  void (*defer_free)(pa_defer_event_0 *);
  void (*defer_set_destroy)(pa_defer_event_0 *, pa_defer_event_destroy_cb_t);
  void (*quit)(pa_mainloop_api_0 *, int);
};

/* 29 */
typedef pa_mainloop_api pa_mainloop_api_0;

/* 32 */
struct pa_io_event
{
  __int8 dummy[1];
};

/* 38 */
struct pa_time_event
{
  __int8 dummy[1];
};

/* 42 */
struct pa_defer_event
{
  __int8 dummy[1];
};

/* 52 */
struct pa_atomic
{
  volatile int value;
};

/* 51 */
typedef pa_atomic pa_atomic_t;

/* 50 */
struct pa_object
{
  pa_atomic_t _ref;
  const unsigned __int8 *type_id;
  void (*free)(pa_object_0 *);
  pa_bool_t (*check_type)(const unsigned __int8 *);
};

/* 49 */
typedef pa_object pa_object_0;

/* 53 */
typedef pa_memchunk pa_memchunk_0;

/* 48 */
struct pa_msgobject
{
  pa_object_0 parent;
  int (*process_msg)(pa_msgobject_0 *, int, void *, int64_t, pa_memchunk_0 *);
};

/* 47 */
typedef pa_msgobject pa_msgobject_0;

/* 58 */
enum pa_core_state : __int32
{
  PA_CORE_STARTUP = 0x0,
  PA_CORE_RUNNING = 0x1,
  PA_CORE_SHUTDOWN = 0x2,
};

/* 57 */
typedef pa_core_state pa_core_state_t;

/* 59 */
typedef pa_idxset pa_idxset_0;

/* 61 */
typedef pa_hashmap pa_hashmap_0;

/* 63 */
typedef pa_source pa_source_0;

/* 83 */
typedef pa_sink pa_sink_0;

/* 82 */
enum pa_channel_position : __int32
{
  PA_CHANNEL_POSITION_INVALID = 0xFFFFFFFF,
  PA_CHANNEL_POSITION_MONO = 0x0,
  PA_CHANNEL_POSITION_FRONT_LEFT = 0x1,
  PA_CHANNEL_POSITION_FRONT_RIGHT = 0x2,
  PA_CHANNEL_POSITION_FRONT_CENTER = 0x3,
  PA_CHANNEL_POSITION_LEFT = 0x1,
  PA_CHANNEL_POSITION_RIGHT = 0x2,
  PA_CHANNEL_POSITION_CENTER = 0x3,
  PA_CHANNEL_POSITION_REAR_CENTER = 0x4,
  PA_CHANNEL_POSITION_REAR_LEFT = 0x5,
  PA_CHANNEL_POSITION_REAR_RIGHT = 0x6,
  PA_CHANNEL_POSITION_LFE = 0x7,
  PA_CHANNEL_POSITION_SUBWOOFER = 0x7,
  PA_CHANNEL_POSITION_FRONT_LEFT_OF_CENTER = 0x8,
  PA_CHANNEL_POSITION_FRONT_RIGHT_OF_CENTER = 0x9,
  PA_CHANNEL_POSITION_SIDE_LEFT = 0xA,
  PA_CHANNEL_POSITION_SIDE_RIGHT = 0xB,
  PA_CHANNEL_POSITION_AUX0 = 0xC,
  PA_CHANNEL_POSITION_AUX1 = 0xD,
  PA_CHANNEL_POSITION_AUX2 = 0xE,
  PA_CHANNEL_POSITION_AUX3 = 0xF,
  PA_CHANNEL_POSITION_AUX4 = 0x10,
  PA_CHANNEL_POSITION_AUX5 = 0x11,
  PA_CHANNEL_POSITION_AUX6 = 0x12,
  PA_CHANNEL_POSITION_AUX7 = 0x13,
  PA_CHANNEL_POSITION_AUX8 = 0x14,
  PA_CHANNEL_POSITION_AUX9 = 0x15,
  PA_CHANNEL_POSITION_AUX10 = 0x16,
  PA_CHANNEL_POSITION_AUX11 = 0x17,
  PA_CHANNEL_POSITION_AUX12 = 0x18,
  PA_CHANNEL_POSITION_AUX13 = 0x19,
  PA_CHANNEL_POSITION_AUX14 = 0x1A,
  PA_CHANNEL_POSITION_AUX15 = 0x1B,
  PA_CHANNEL_POSITION_AUX16 = 0x1C,
  PA_CHANNEL_POSITION_AUX17 = 0x1D,
  PA_CHANNEL_POSITION_AUX18 = 0x1E,
  PA_CHANNEL_POSITION_AUX19 = 0x1F,
  PA_CHANNEL_POSITION_AUX20 = 0x20,
  PA_CHANNEL_POSITION_AUX21 = 0x21,
  PA_CHANNEL_POSITION_AUX22 = 0x22,
  PA_CHANNEL_POSITION_AUX23 = 0x23,
  PA_CHANNEL_POSITION_AUX24 = 0x24,
  PA_CHANNEL_POSITION_AUX25 = 0x25,
  PA_CHANNEL_POSITION_AUX26 = 0x26,
  PA_CHANNEL_POSITION_AUX27 = 0x27,
  PA_CHANNEL_POSITION_AUX28 = 0x28,
  PA_CHANNEL_POSITION_AUX29 = 0x29,
  PA_CHANNEL_POSITION_AUX30 = 0x2A,
  PA_CHANNEL_POSITION_AUX31 = 0x2B,
  PA_CHANNEL_POSITION_TOP_CENTER = 0x2C,
  PA_CHANNEL_POSITION_TOP_FRONT_LEFT = 0x2D,
  PA_CHANNEL_POSITION_TOP_FRONT_RIGHT = 0x2E,
  PA_CHANNEL_POSITION_TOP_FRONT_CENTER = 0x2F,
  PA_CHANNEL_POSITION_TOP_REAR_LEFT = 0x30,
  PA_CHANNEL_POSITION_TOP_REAR_RIGHT = 0x31,
  PA_CHANNEL_POSITION_TOP_REAR_CENTER = 0x32,
  PA_CHANNEL_POSITION_MAX = 0x33,
};

/* 81 */
typedef pa_channel_position pa_channel_position_t;

/* 80 */
struct pa_channel_map
{
  uint8_t channels;
  pa_channel_position_t map[32];
};

/* 79 */
typedef pa_channel_map pa_channel_map_0;

/* 117 */
typedef pa_subscription pa_subscription_0;

/* 119 */
typedef pa_subscription_event pa_subscription_event_0;

/* 121 */
typedef pa_mempool pa_mempool_0;

/* 55 */
typedef pa_memblock pa_memblock_0;

/* 124 */
struct pa_silence_cache
{
  pa_memblock_0 *blocks[13];
};

/* 123 */
typedef pa_silence_cache pa_silence_cache_0;

/* 101 */
enum pa_resample_method : __int32
{
  PA_RESAMPLER_INVALID = 0xFFFFFFFF,
  PA_RESAMPLER_SRC_SINC_BEST_QUALITY = 0x0,
  PA_RESAMPLER_SRC_SINC_MEDIUM_QUALITY = 0x1,
  PA_RESAMPLER_SRC_SINC_FASTEST = 0x2,
  PA_RESAMPLER_SRC_ZERO_ORDER_HOLD = 0x3,
  PA_RESAMPLER_SRC_LINEAR = 0x4,
  PA_RESAMPLER_TRIVIAL = 0x5,
  PA_RESAMPLER_SPEEX_FLOAT_BASE = 0x6,
  PA_RESAMPLER_SPEEX_FLOAT_MAX = 0x10,
  PA_RESAMPLER_SPEEX_FIXED_BASE = 0x11,
  PA_RESAMPLER_SPEEX_FIXED_MAX = 0x1B,
  PA_RESAMPLER_FFMPEG = 0x1C,
  PA_RESAMPLER_AUTO = 0x1D,
  PA_RESAMPLER_COPY = 0x1E,
  PA_RESAMPLER_PEAKS = 0x1F,
  PA_RESAMPLER_MAX = 0x20,
};

/* 100 */
typedef pa_resample_method pa_resample_method_t;

/* 126 */
enum pa_server_type : __int32
{
  PA_SERVER_TYPE_UNSET = 0x0,
  PA_SERVER_TYPE_USER = 0x1,
  PA_SERVER_TYPE_SYSTEM = 0x2,
  PA_SERVER_TYPE_NONE = 0x3,
};

/* 125 */
typedef pa_server_type pa_server_type_t;

/* 129 */
typedef pa_hook_slot pa_hook_slot_0;

/* 128 */
struct pa_hook
{
  pa_hook_slot_0 *slots;
  int n_firing;
  int n_dead;
  void *data;
};

/* 127 */
typedef pa_hook pa_hook_0;

/* 46 */
struct pa_core
{
  pa_msgobject_0 parent;
  pa_core_state_t state;
  uint32_t cookie;
  pa_mainloop_api_0 *mainloop;
  pa_idxset_0 *clients;
  pa_idxset_0 *cards;
  pa_idxset_0 *sinks;
  pa_idxset_0 *sources;
  pa_idxset_0 *sink_inputs;
  pa_idxset_0 *source_outputs;
  pa_idxset_0 *modules;
  pa_idxset_0 *scache;
  pa_hashmap_0 *namereg;
  pa_hashmap_0 *shared;
  pa_source_0 *default_source;
  pa_sink_0 *default_sink;
  pa_channel_map_0 default_channel_map;
  pa_sample_spec_0 default_sample_spec;
  unsigned int default_n_fragments;
  unsigned int default_fragment_size_msec;
  unsigned int sync_volume_safety_margin_usec;
  int sync_volume_extra_delay_usec;
  pa_defer_event_0 *module_defer_unload_event;
  pa_defer_event_0 *subscription_defer_event;
  pa_subscription_0 *subscriptions;
  pa_subscription_event_0 *subscription_event_queue;
  pa_subscription_event_0 *subscription_event_last;
  pa_mempool_0 *mempool;
  pa_silence_cache_0 silence_cache;
  pa_time_event_0 *exit_event;
  pa_time_event_0 *scache_auto_unload_event;
  int exit_idle_time;
  int scache_idle_time;
  __int8 flat_volumes : 1;
  __int8 disallow_module_loading : 1;
  __int8 disallow_exit : 1;
  __int8 running_as_daemon : 1;
  __int8 realtime_scheduling : 1;
  __int8 disable_remixing : 1;
  __int8 disable_lfe_remixing : 1;
  __int8 sync_volume : 1;
  pa_resample_method_t resample_method;
  int realtime_priority;
  pa_server_type_t server_type;
  pa_hook_0 hooks[44];
};

/* 45 */
typedef pa_core pa_core_0;

/* 54 */
struct pa_memchunk
{
  pa_memblock_0 *memblock;
  size_t index;
  size_t length;
};

/* 60 */
struct pa_idxset
{
  __int8 dummy[1];
};

/* 62 */
struct pa_hashmap
{
  __int8 dummy[1];
};

/* 66 */
enum pa_source_state : __int32
{
  PA_SOURCE_INVALID_STATE = 0xFFFFFFFF,
  PA_SOURCE_RUNNING = 0x0,
  PA_SOURCE_IDLE = 0x1,
  PA_SOURCE_SUSPENDED = 0x2,
  PA_SOURCE_INIT = 0xFFFFFFFE,
  PA_SOURCE_UNLINKED = 0xFFFFFFFD,
};

/* 65 */
typedef pa_source_state pa_source_state_t;

/* 68 */
enum pa_source_flags : __int32
{
  PA_SOURCE_NOFLAGS = 0x0,
  PA_SOURCE_HW_VOLUME_CTRL = 0x1,
  PA_SOURCE_LATENCY = 0x2,
  PA_SOURCE_HARDWARE = 0x4,
  PA_SOURCE_NETWORK = 0x8,
  PA_SOURCE_HW_MUTE_CTRL = 0x10,
  PA_SOURCE_DECIBEL_VOLUME = 0x20,
  PA_SOURCE_DYNAMIC_LATENCY = 0x40,
};

/* 67 */
typedef pa_source_flags pa_source_flags_t;

/* 70 */
enum pa_suspend_cause : __int32
{
  PA_SUSPEND_USER = 0x1,
  PA_SUSPEND_APPLICATION = 0x2,
  PA_SUSPEND_IDLE = 0x4,
  PA_SUSPEND_SESSION = 0x8,
  PA_SUSPEND_ALL = 0xFFFF,
};

/* 69 */
typedef pa_suspend_cause pa_suspend_cause_t;

/* 71 */
typedef pa_module pa_module_0;

/* 75 */
typedef pa_card pa_card_0;

/* 89 */
typedef uint32_t pa_volume_t;

/* 91 */
struct pa_cvolume
{
  uint8_t channels;
  pa_volume_t values[32];
};

/* 90 */
typedef pa_cvolume pa_cvolume_0;

/* 107 */
typedef pa_asyncmsgq pa_asyncmsgq_0;

/* 109 */
typedef pa_device_port pa_device_port_0;

/* 112 */
typedef pa_rtpoll pa_rtpoll_0;

/* 116 */
struct $03B3BBA2BBF9F7BBD2B8B88C73C55529
{
  pa_source_state_t state;
  pa_hashmap_0 *outputs;
  pa_rtpoll_0 *rtpoll;
  pa_cvolume_0 soft_volume;
  __int8 soft_muted : 1;
  __int8 requested_latency_valid : 1;
  pa_usec_t requested_latency;
  size_t max_rewind;
  pa_usec_t min_latency;
  pa_usec_t max_latency;
  pa_usec_t fixed_latency;
};

/* 64 */
struct __attribute__((aligned(8))) pa_source
{
  pa_msgobject_0 parent;
  uint32_t index;
  pa_core_0 *core;
  pa_source_state_t state;
  pa_source_flags_t flags;
  pa_suspend_cause_t suspend_cause;
  unsigned __int8 *name;
  unsigned __int8 *driver;
  pa_proplist_0 *proplist;
  pa_module_0 *module;
  pa_card_0 *card;
  pa_sample_spec_0 sample_spec;
  pa_channel_map_0 channel_map;
  pa_idxset_0 *outputs;
  unsigned int n_corked;
  pa_sink_0 *monitor_of;
  pa_volume_t base_volume;
  unsigned int n_volume_steps;
  pa_cvolume_0 volume;
  pa_cvolume_0 soft_volume;
  __int8 muted : 1;
  __int8 refresh_volume : 1;
  __int8 refresh_muted : 1;
  __int8 save_port : 1;
  __int8 save_volume : 1;
  __int8 save_muted : 1;
  pa_asyncmsgq_0 *asyncmsgq;
  pa_memchunk_0 silence;
  pa_hashmap_0 *ports;
  pa_device_port_0 *active_port;
  unsigned int priority;
  int (*set_state)(pa_source_0 *, pa_source_state_t);
  void (*get_volume)(pa_source_0 *);
  void (*set_volume)(pa_source_0 *);
  void (*get_mute)(pa_source_0 *);
  void (*set_mute)(pa_source_0 *);
  void (*update_requested_latency)(pa_source_0 *);
  int (*set_port)(pa_source_0 *, pa_device_port_0 *);
  $03B3BBA2BBF9F7BBD2B8B88C73C55529 thread_info;
  void *userdata;
};

/* 86 */
enum pa_sink_state : __int32
{
  PA_SINK_INVALID_STATE = 0xFFFFFFFF,
  PA_SINK_RUNNING = 0x0,
  PA_SINK_IDLE = 0x1,
  PA_SINK_SUSPENDED = 0x2,
  PA_SINK_INIT = 0xFFFFFFFE,
  PA_SINK_UNLINKED = 0xFFFFFFFD,
};

/* 85 */
typedef pa_sink_state pa_sink_state_t;

/* 88 */
enum pa_sink_flags : __int32
{
  PA_SINK_NOFLAGS = 0x0,
  PA_SINK_HW_VOLUME_CTRL = 0x1,
  PA_SINK_LATENCY = 0x2,
  PA_SINK_HARDWARE = 0x4,
  PA_SINK_NETWORK = 0x8,
  PA_SINK_HW_MUTE_CTRL = 0x10,
  PA_SINK_DECIBEL_VOLUME = 0x20,
  PA_SINK_FLAT_VOLUME = 0x40,
  PA_SINK_DYNAMIC_LATENCY = 0x80,
  PA_SINK_SYNC_VOLUME = 0x100,
  PA_SINK_SHARE_VOLUME_WITH_MASTER = 0x200,
};

/* 87 */
typedef pa_sink_flags pa_sink_flags_t;

/* 92 */
typedef pa_sink_input pa_sink_input_0;

/* 114 */
typedef pa_sink_volume_change pa_sink_volume_change_0;

/* 111 */
struct __attribute__((aligned(8))) $01C2CA6F8C680B1D1CBE985B99C83782
{
  pa_sink_state_t state;
  pa_hashmap_0 *inputs;
  pa_rtpoll_0 *rtpoll;
  pa_cvolume_0 soft_volume;
  __int8 soft_muted : 1;
  __int8 requested_latency_valid : 1;
  pa_usec_t requested_latency;
  size_t max_rewind;
  size_t max_request;
  size_t rewind_nbytes;
  pa_bool_t rewind_requested;
  pa_usec_t min_latency;
  pa_usec_t max_latency;
  pa_usec_t fixed_latency;
  pa_sink_volume_change_0 *volume_changes;
  pa_sink_volume_change_0 *volume_changes_tail;
  pa_cvolume_0 current_hw_volume;
  uint32_t volume_change_safety_margin;
  int32_t volume_change_extra_delay;
};

/* 84 */
struct __attribute__((aligned(8))) pa_sink
{
  pa_msgobject_0 parent;
  uint32_t index;
  pa_core_0 *core;
  pa_sink_state_t state;
  pa_sink_flags_t flags;
  pa_suspend_cause_t suspend_cause;
  unsigned __int8 *name;
  unsigned __int8 *driver;
  pa_proplist_0 *proplist;
  pa_module_0 *module;
  pa_card_0 *card;
  pa_sample_spec_0 sample_spec;
  pa_channel_map_0 channel_map;
  pa_idxset_0 *inputs;
  unsigned int n_corked;
  pa_source_0 *monitor_source;
  pa_volume_t base_volume;
  unsigned int n_volume_steps;
  pa_cvolume_0 reference_volume;
  pa_cvolume_0 real_volume;
  pa_cvolume_0 soft_volume;
  pa_sink_input_0 *flat_sink_input;
  __int8 muted : 1;
  __int8 refresh_volume : 1;
  __int8 refresh_muted : 1;
  __int8 save_port : 1;
  __int8 save_volume : 1;
  __int8 save_muted : 1;
  pa_asyncmsgq_0 *asyncmsgq;
  pa_memchunk_0 silence;
  pa_hashmap_0 *ports;
  pa_device_port_0 *active_port;
  unsigned int priority;
  int (*set_state)(pa_sink_0 *, pa_sink_state_t);
  void (*get_volume)(pa_sink_0 *);
  void (*set_volume)(pa_sink_0 *);
  void (*write_volume)(pa_sink_0 *);
  void (*get_mute)(pa_sink_0 *);
  void (*set_mute)(pa_sink_0 *);
  void (*request_rewind)(pa_sink_0 *);
  void (*update_requested_latency)(pa_sink_0 *);
  int (*set_port)(pa_sink_0 *, pa_device_port_0 *);
  $01C2CA6F8C680B1D1CBE985B99C83782 thread_info;
  void *userdata;
};

/* 118 */
struct pa_subscription
{
  __int8 dummy[1];
};

/* 120 */
struct pa_subscription_event
{
  __int8 dummy[1];
};

/* 122 */
struct pa_mempool
{
  __int8 dummy[1];
};

/* 56 */
struct pa_memblock
{
  __int8 dummy[1];
};

/* 132 */
enum pa_hook_priority : __int32
{
  PA_HOOK_EARLY = 0xFFFFFF9C,
  PA_HOOK_NORMAL = 0x0,
  PA_HOOK_LATE = 0x64,
};

/* 131 */
typedef pa_hook_priority pa_hook_priority_t;

/* 135 */
enum pa_hook_result : __int32
{
  PA_HOOK_OK = 0x0,
  PA_HOOK_STOP = 0x1,
  PA_HOOK_CANCEL = 0xFFFFFFFF,
};

/* 134 */
typedef pa_hook_result pa_hook_result_t;

/* 133 */
typedef pa_hook_result_t (*pa_hook_cb_t)(void *, void *, void *);

/* 130 */
struct pa_hook_slot
{
  pa_bool_t dead;
  pa_hook_0 *hook;
  pa_hook_priority_t priority;
  pa_hook_cb_t callback;
  void *data;
  pa_hook_slot_0 *next;
  pa_hook_slot_0 *prev;
};

/* 73 */
typedef lt__handle *lt_dlhandle;

/* 72 */
struct pa_module
{
  pa_core_0 *core;
  unsigned __int8 *name;
  unsigned __int8 *argument;
  uint32_t index;
  lt_dlhandle dl;
  int (*init)(pa_module_0 *);
  void (*done)(pa_module_0 *);
  int (*get_n_used)(pa_module_0 *);
  void *userdata;
  __int8 load_once : 1;
  __int8 unload_requested : 1;
  pa_proplist_0 *proplist;
};

/* 77 */
typedef pa_card_profile pa_card_profile_0;

/* 76 */
struct pa_card
{
  uint32_t index;
  pa_core_0 *core;
  unsigned __int8 *name;
  pa_proplist_0 *proplist;
  pa_module_0 *module;
  unsigned __int8 *driver;
  pa_idxset_0 *sinks;
  pa_idxset_0 *sources;
  pa_hashmap_0 *profiles;
  pa_card_profile_0 *active_profile;
  __int8 save_profile : 1;
  void *userdata;
  int (*set_profile)(pa_card_0 *, pa_card_profile_0 *);
};

/* 108 */
struct pa_asyncmsgq
{
  __int8 dummy[1];
};

/* 110 */
struct pa_device_port
{
  unsigned __int8 *name;
  unsigned __int8 *description;
  unsigned int priority;
};

/* 113 */
struct pa_rtpoll
{
  __int8 dummy[1];
};

/* 95 */
enum pa_sink_input_state : __int32
{
  PA_SINK_INPUT_INIT = 0x0,
  PA_SINK_INPUT_DRAINED = 0x1,
  PA_SINK_INPUT_RUNNING = 0x2,
  PA_SINK_INPUT_CORKED = 0x3,
  PA_SINK_INPUT_UNLINKED = 0x4,
};

/* 94 */
typedef pa_sink_input_state pa_sink_input_state_t;

/* 97 */
enum pa_sink_input_flags : __int32
{
  PA_SINK_INPUT_VARIABLE_RATE = 0x1,
  PA_SINK_INPUT_DONT_MOVE = 0x2,
  PA_SINK_INPUT_START_CORKED = 0x4,
  PA_SINK_INPUT_NO_REMAP = 0x8,
  PA_SINK_INPUT_NO_REMIX = 0x10,
  PA_SINK_INPUT_FIX_FORMAT = 0x20,
  PA_SINK_INPUT_FIX_RATE = 0x40,
  PA_SINK_INPUT_FIX_CHANNELS = 0x80,
  PA_SINK_INPUT_DONT_INHIBIT_AUTO_SUSPEND = 0x100,
  PA_SINK_INPUT_NO_CREATE_ON_SUSPEND = 0x200,
  PA_SINK_INPUT_KILL_ON_SUSPEND = 0x400,
};

/* 96 */
typedef pa_sink_input_flags pa_sink_input_flags_t;

/* 98 */
typedef pa_client pa_client_0;

/* 103 */
typedef pa_resampler pa_resampler_0;

/* 105 */
typedef pa_memblockq pa_memblockq_0;

/* 102 */
struct __attribute__((aligned(8))) $E94A2A99D5584A5C4F3495926CD38C79
{
  pa_sink_input_state_t state;
  pa_atomic_t drained;
  pa_cvolume_0 soft_volume;
  __int8 muted : 1;
  __int8 attached : 1;
  __int8 rewrite_flush : 1;
  __int8 dont_rewind_render : 1;
  size_t rewrite_nbytes;
  uint64_t underrun_for;
  uint64_t playing_for;
  pa_sample_spec_0 sample_spec;
  pa_resampler_0 *resampler;
  pa_memblockq_0 *render_memblockq;
  pa_sink_input_0 *sync_prev;
  pa_sink_input_0 *sync_next;
  pa_usec_t requested_sink_latency;
  pa_hashmap_0 *direct_outputs;
};

/* 93 */
struct __attribute__((aligned(8))) pa_sink_input
{
  pa_msgobject_0 parent;
  uint32_t index;
  pa_core_0 *core;
  pa_sink_input_state_t state;
  pa_sink_input_flags_t flags;
  unsigned __int8 *driver;
  pa_proplist_0 *proplist;
  pa_module_0 *module;
  pa_client_0 *client;
  pa_sink_0 *sink;
  pa_sink_0 *origin_sink;
  pa_idxset_0 *direct_outputs;
  pa_sample_spec_0 sample_spec;
  pa_channel_map_0 channel_map;
  pa_sink_input_0 *sync_prev;
  pa_sink_input_0 *sync_next;
  pa_cvolume_0 volume;
  pa_cvolume_0 reference_ratio;
  pa_cvolume_0 real_ratio;
  pa_cvolume_0 volume_factor;
  pa_cvolume_0 soft_volume;
  pa_cvolume_0 volume_factor_sink;
  __int8 muted : 1;
  __int8 save_sink : 1;
  __int8 save_volume : 1;
  __int8 save_muted : 1;
  pa_resample_method_t requested_resample_method;
  pa_resample_method_t actual_resample_method;
  int (*pop)(pa_sink_input_0 *, size_t, pa_memchunk_0 *);
  void (*process_rewind)(pa_sink_input_0 *, size_t);
  void (*update_max_rewind)(pa_sink_input_0 *, size_t);
  void (*update_max_request)(pa_sink_input_0 *, size_t);
  void (*update_sink_requested_latency)(pa_sink_input_0 *);
  void (*update_sink_latency_range)(pa_sink_input_0 *);
  void (*update_sink_fixed_latency)(pa_sink_input_0 *);
  void (*attach)(pa_sink_input_0 *);
  void (*detach)(pa_sink_input_0 *);
  void (*suspend)(pa_sink_input_0 *, pa_bool_t);
  void (*suspend_within_thread)(pa_sink_input_0 *, pa_bool_t);
  void (*moving)(pa_sink_input_0 *, pa_sink_0 *);
  void (*kill)(pa_sink_input_0 *);
  pa_usec_t (*get_latency)(pa_sink_input_0 *);
  void (*state_change)(pa_sink_input_0 *, pa_sink_input_state_t);
  pa_bool_t (*may_move_to)(pa_sink_input_0 *, pa_sink_0 *);
  void (*send_event)(pa_sink_input_0 *, const unsigned __int8 *, pa_proplist_0 *);
  void (*volume_changed)(pa_sink_input_0 *);
  void (*mute_changed)(pa_sink_input_0 *);
  $E94A2A99D5584A5C4F3495926CD38C79 thread_info;
  void *userdata;
};

/* 115 */
struct pa_sink_volume_change
{
  __int8 dummy[1];
};

/* 74 */
struct lt__handle
{
  __int8 dummy[1];
};

/* 78 */
struct pa_card_profile
{
  unsigned __int8 *name;
  unsigned __int8 *description;
  unsigned int priority;
  unsigned int n_sinks;
  unsigned int n_sources;
  unsigned int max_sink_channels;
  unsigned int max_source_channels;
};

/* 99 */
struct pa_client
{
  uint32_t index;
  pa_core_0 *core;
  pa_proplist_0 *proplist;
  pa_module_0 *module;
  unsigned __int8 *driver;
  pa_idxset_0 *sink_inputs;
  pa_idxset_0 *source_outputs;
  void *userdata;
  void (*kill)(pa_client_0 *);
  void (*send_event)(pa_client_0 *, const unsigned __int8 *, pa_proplist_0 *);
};

/* 104 */
struct pa_resampler
{
  __int8 dummy[1];
};

/* 106 */
struct pa_memblockq
{
  __int8 dummy[1];
};

/* 137 */
struct pa_modargs
{
  __int8 dummy[1];
};

/* 136 */
typedef pa_modargs pa_modargs_0;

/* 139 */
struct meego_algorithm_hook_api
{
  __int8 dummy[1];
};

/* 138 */
typedef meego_algorithm_hook_api meego_algorithm_hook_api_0;

/* 141 */
struct meego_algorithm_hook_slot
{
  __int8 dummy[1];
};

/* 140 */
typedef meego_algorithm_hook_slot meego_algorithm_hook_slot_0;

/* 143 */
struct meego_algorithm_hook_data
{
  uint8_t channels;
  pa_memchunk_0 channel[8];
};

/* 142 */
typedef meego_algorithm_hook_data meego_algorithm_hook_data_0;

/* 144 */
enum meego_parameter_status : __int32
{
  MEEGO_PARAM_ENABLE = 0x0,
  MEEGO_PARAM_DISABLE = 0x1,
  MEEGO_PARAM_UPDATE = 0x2,
  MEEGO_PARAM_MODE_CHANGE = 0x3,
};

/* 145 */
typedef meego_parameter_status meego_parameter_status_t;

/* 146 */
struct meego_parameter_update_args
{
  const unsigned __int8 *mode;
  meego_parameter_status_t status;
  const void *parameters;
  unsigned int length;
};

/* 147 */
typedef meego_parameter_update_args meego_parameter_update_args_0;

/* 148 */
struct meego_algorithm_callback_list
{
  const unsigned __int8 *identifier;
  const unsigned __int8 *default_argument;
  pa_hook_priority_t priority;
  pa_hook_cb_t cb;
};

/* 150 */
struct meego_algorithm_base_hook
{
  __int8 dummy[1];
};

/* 149 */
typedef meego_algorithm_base_hook meego_algorithm_base_hook_0;

/* 152 */
struct meego_algorithm_base
{
  pa_core_0 *core;
  pa_module_0 *module;
  pa_modargs_0 *arguments;
  meego_algorithm_hook_api_0 *algorithm;
  meego_algorithm_base_hook_0 *algorithm_hooks;
  meego_algorithm_base_hook_0 *parameter_hooks;
  void *userdata;
};

/* 151 */
typedef meego_algorithm_base meego_algorithm_base_0;

/* 153 */
typedef meego_algorithm_callback_list meego_algorithm_callback_list_0;

/* 154 */
struct EAP_MdrcCompressionCurve
{
  float inputLevels[5];
  float outputLevels[5];
  float limitLevel;
  float volume;
};

/* 155 */
typedef EAP_MdrcCompressionCurve EAP_MdrcCompressionCurve_0;

/* 156 */
struct EAP_MdrcCompressionCurveSet
{
  int curveCount;
  EAP_MdrcCompressionCurve_0 *curves;
};

/* 157 */
typedef EAP_MdrcCompressionCurveSet EAP_MdrcCompressionCurveSet_0;

/* 158 */
struct EAP_MultibandDrcControl
{
  float m_sampleRate;
  int m_bandCount;
  int m_downSamplingFactor;
  float m_companderLookahead;
  float m_limiterLookahead;
  int m_maxBlockSize;
  float m_oneOverFactor;
  float m_volume[5];
  EAP_MdrcCompressionCurveSet_0 m_curveSet[5];
  int m_eqCount;
  float **m_eqCurves;
};

/* 159 */
typedef EAP_MultibandDrcControl EAP_MultibandDrcControl_0;

/* 160 */
typedef EAP_MultibandDrcControl_0 EAP_MultibandDrcControlInt32;

/* 161 */
enum EAP_MemoryType : __int32
{
  EAP_MEMORY_PERSISTENT = 0x0,
  EAP_MEMORY_SCRATCH = 0x1,
};

/* 162 */
typedef EAP_MemoryType EAP_MemoryType_0;

/* 163 */
struct EAP_MemoryRecord
{
  size_t size;
  size_t alignment;
  EAP_MemoryType_0 type;
  int location;
  void *base;
  int freeThisBlock;
};

/* 164 */
typedef EAP_MemoryRecord EAP_MemoryRecord_0;

/* 165 */
typedef void *EAP_MultibandDrcInt32Handle;

/* 166 */
struct IMUMDRC_Status
{
  int16 linkCoeffSelf;
  int16 linkCoeffOthers;
  int32 attCoeff[5];
  int32 relCoeff[5];
  int32 levelLimits[5][6];
  int32 K[5][7];
  int16 AExp[5][7];
  int16 AFrac[5][7];
  int16 band_count;
  int16 use_mumdrc;
  int32 Gain[5];
  int32 amplitudes[5];
};

/* 167 */
struct __attribute__((aligned(4))) IMUMDRC_Limiter_Status
{
  int32 limiterThreshold;
  int32 limGain;
  int16 lim_attCoeff;
  int16 lim_relCoeff;
  int16 use_limiter;
};

/* 168 */
struct mumdrc_userdata_t
{
  unsigned int DRCnMemRecs;
  EAP_MemoryRecord_0 *DRCpMemRecs;
  EAP_MultibandDrcControlInt32 control;
  EAP_MultibandDrcInt32Handle drc;
};

/* 169 */
typedef mumdrc_userdata_t mumdrc_userdata_t_0;

/* 170 */
struct userdata
{
  pa_core_0 *core;
  pa_module_0 *module;
  meego_algorithm_base_0 *base;
  meego_algorithm_hook_slot_0 *mumdrc_hook_slot;
  float mumdrc_volume;
  pa_bool_t mumdrc_enabled;
  mumdrc_userdata_t_0 *mumdrc_data;
};

/* 171 */
typedef int32 EAP_MdrcInternalEventType;

/* 172 */
struct EAP_MdrcInternalEvent
{
  EAP_MdrcInternalEventType type;
};

/* 173 */
typedef EAP_MdrcInternalEvent EAP_MdrcInternalEvent_0;

/* 174 */
struct EAP_CompressionCurveImplDataInt32
{
  int32 levelLimits[5];
  int32 K[6];
  int16 AExp[6];
  int16 AFrac[6];
};

/* 175 */
typedef EAP_CompressionCurveImplDataInt32 EAP_CompressionCurveImplDataInt32_0;

/* 176 */
struct EAP_MultibandDrcInt32_InitInfo
{
  int32 sampleRate;
  int32 bandCount;
  int32 companderLookahead;
  int32 limiterLookahead;
  int32 downSamplingFactor;
  int32 avgShift;
  int32 maxBlockSize;
};

/* 177 */
typedef EAP_MultibandDrcInt32_InitInfo EAP_MultibandDrcInt32_InitInfo_0;

/* 178 */
struct EAP_MdrcInternalEventCompressionCurveInt32
{
  EAP_MdrcInternalEvent_0 common;
  EAP_CompressionCurveImplDataInt32_0 curve;
  int32 band;
};

/* 179 */
typedef EAP_MdrcInternalEventCompressionCurveInt32 EAP_MdrcInternalEventCompressionCurveInt32_0;

/* 180 */
struct EAP_MdrcInternalEventBandCoeffInt32
{
  EAP_MdrcInternalEvent_0 common;
  int16 coeff;
  int16 dummy;
  int32 band;
};

/* 181 */
typedef EAP_MdrcInternalEventBandCoeffInt32 EAP_MdrcInternalEventBandCoeffInt32_0;

/* 182 */
typedef EAP_MdrcInternalEventBandCoeffInt32_0 EAP_MdrcInternalEventCompanderAttackCoeffInt32;

/* 183 */
typedef EAP_MdrcInternalEventBandCoeffInt32_0 EAP_MdrcInternalEventCompanderReleaseCoeffInt32;

/* 184 */
struct EAP_MdrcInternalEventCoeffInt32
{
  EAP_MdrcInternalEvent_0 common;
  int16 coeff;
  int16 dummy;
};

/* 185 */
typedef EAP_MdrcInternalEventCoeffInt32 EAP_MdrcInternalEventCoeffInt32_0;

/* 186 */
typedef EAP_MdrcInternalEventCoeffInt32_0 EAP_MdrcInternalEventLimiterAttackCoeffInt32;

/* 187 */
typedef EAP_MdrcInternalEventCoeffInt32_0 EAP_MdrcInternalEventLimiterReleaseCoeffInt32;

/* 188 */
struct EAP_MdrcInternalEventLimiterThresholdInt32
{
  EAP_MdrcInternalEvent_0 common;
  int32 threshold;
};

/* 189 */
typedef EAP_MdrcInternalEventLimiterThresholdInt32 EAP_MdrcInternalEventLimiterThresholdInt32_0;

/* 190 */
struct EAP_MdrcInternalEventCrossBandLinkInt32
{
  EAP_MdrcInternalEvent_0 common;
  int16 selfMult;
  int16 sumMult;
};

/* 191 */
typedef EAP_MdrcInternalEventCrossBandLinkInt32 EAP_MdrcInternalEventCrossBandLinkInt32_0;

/* 192 */
typedef IMUMDRC_Status IMUMDRC_Status_0;

/* 193 */
typedef IMUMDRC_Limiter_Status IMUMDRC_Limiter_Status_0;

/* 194 */
struct EAP_QmfStereoInt32FilterState
{
  int32 m_mem1;
  int32 m_mem2;
};

/* 195 */
typedef EAP_QmfStereoInt32FilterState EAP_QmfStereoInt32FilterState_0;

/* 196 */
struct EAP_QmfStereoInt32
{
  int16 coeff01;
  int16 coeff02;
  int16 coeff11;
  int16 coeff12;
  EAP_QmfStereoInt32FilterState_0 m_leftAnalysisFilter0;
  EAP_QmfStereoInt32FilterState_0 m_leftAnalysisFilter1;
  EAP_QmfStereoInt32FilterState_0 m_rightAnalysisFilter0;
  EAP_QmfStereoInt32FilterState_0 m_rightAnalysisFilter1;
  EAP_QmfStereoInt32FilterState_0 m_leftSynthesisFilter0;
  EAP_QmfStereoInt32FilterState_0 m_leftSynthesisFilter1;
  EAP_QmfStereoInt32FilterState_0 m_rightSynthesisFilter0;
  EAP_QmfStereoInt32FilterState_0 m_rightSynthesisFilter1;
  int m_prevInputSampleCount;
  int m_analysisOdd;
  int m_prevOutputSampleCount;
  int m_synthesisOdd;
  int32 m_leftAnalysisMem;
  int32 m_rightAnalysisMem;
  int32 m_leftSynthesisMem;
  int32 m_rightSynthesisMem;
};

/* 197 */
typedef EAP_QmfStereoInt32 EAP_QmfStereoInt32_0;

/* 198 */
struct EAP_WfirInt32
{
  int warpingShift;
};

/* 199 */
typedef EAP_WfirInt32 EAP_WfirInt32_0;

/* 200 */
typedef void (*EAP_WfirInt32_ProcessFptr)(EAP_WfirInt32_0 *, int32 *const *, int32 *const *, int32 *, int32 *, const int32 *, const int32 *, const int32 *, const int32 *, int);

/* 201 */
struct EAP_AverageAmplitudeInt32
{
  int32 m_memory;
  int m_downSamplingFactor;
  int m_downSamplingCounter;
  int m_shift;
};

/* 202 */
typedef EAP_AverageAmplitudeInt32 EAP_AverageAmplitudeInt32_0;

/* 203 */
struct EAP_AttRelFilterInt32
{
  int16 m_attCoeff;
  int16 m_relCoeff;
  int32 m_prevOutput;
};

/* 204 */
typedef EAP_AttRelFilterInt32 EAP_AttRelFilterInt32_0;

/* 205 */
struct EAP_MdrcDelaysAndGainsInt32
{
  int m_bandCount;
  int m_delay;
  int m_downSamplingFactor;
  int m_downSamplingCounter;
  int16 m_oneOverFactorQ15;
  int32 m_currGainQ15[5];
  int32 m_currDeltaQ15[5];
  int32 *m_memBuffers[12];
};

/* 206 */
typedef EAP_MdrcDelaysAndGainsInt32 EAP_MdrcDelaysAndGainsInt32_0;

/* 207 */
struct EAP_LimiterInt32
{
  int32 m_threshold;
  int16 m_attCoeff;
  int16 m_relCoeff;
  int32 m_prevGainQ30;
  int32 *m_lookaheadMem1;
  int32 *m_lookaheadMem2;
  int16 *m_scratch;
  int m_memSize;
};

/* 208 */
typedef EAP_LimiterInt32 EAP_LimiterInt32_0;

/* 209 */
struct EAP_MultibandDrcInt32
{
  EAP_QmfStereoInt32_0 qmf;
  EAP_WfirInt32_ProcessFptr filterbankFunc;
  EAP_WfirInt32_0 *filterbank;
  EAP_AverageAmplitudeInt32_0 *avgFilters;
  EAP_CompressionCurveImplDataInt32_0 *compressionCurves;
  EAP_AttRelFilterInt32_0 *attRelFilters;
  EAP_MdrcDelaysAndGainsInt32_0 gains;
  EAP_LimiterInt32_0 limiter;
  int32 bandCount;
  int16 m_xBandLinkSelf;
  int16 m_xBandLinkSum;
  int32 *m_companderLookahead[5];
  int32 *m_limiterLookahead1;
  int32 *m_limiterLookahead2;
  int32 *m_leftFilterbankOutputs[5];
  int32 *m_rightFilterbankOutputs[5];
  int32 *m_levelData[5];
  int32 *m_scratchMem1;
  int32 *m_scratchMem2;
  int32 *m_scratchMem3;
  int32 *m_scratchMem4;
  int32 *m_scratchMem5;
  int32 *m_scratchMem6;
};

/* 210 */
typedef EAP_MultibandDrcInt32 EAP_MultibandDrcInt32_0;

/* 211 */
typedef int ptrdiff_t;

/* 212 */
typedef unsigned int wchar_t;

/* 213 */
typedef __int64 long long;

/* 214 */
typedef __int16 int16_0;

/* 215 */
typedef int int24;

/* 216 */
typedef int int32_0;

/* 217 */
typedef long long int40;

/* 218 */
typedef long long int48;

/* 219 */
typedef long long int64;

/* 220 */
typedef unsigned __int16 uint16;

/* 221 */
typedef unsigned int uint24;

/* 222 */
typedef unsigned int uint32;

/* 223 */
typedef unsigned __int64 uint40;

/* 224 */
typedef unsigned __int64 uint48;

/* 225 */
typedef unsigned __int64 uint64;

/* 226 */
enum $970FBAB034322465BDDE1913171B7DB3 : __int32
{
  EAP_CHECK_SIZE_OF_INT16 = 0x1,
  EAP_CHECK_SIZE_OF_UINT16 = 0x1,
  EAP_CHECK_SIZE_OF_INT32 = 0x1,
  EAP_CHECK_SIZE_OF_UINT32 = 0x1,
  EAP_CHECK_SIZE_OF_INT64 = 0x1,
  EAP_CHECK_SIZE_OF_UINT64 = 0x1,
};

/* 227 */
enum EAP_DataType : __int32
{
  EAP_DATA_TYPE_INT16 = 0x0,
  EAP_DATA_TYPE_INT24 = 0x1,
  EAP_DATA_TYPE_INT32 = 0x2,
  EAP_DATA_TYPE_INT32_Q15 = 0x3,
  EAP_DATA_TYPE_INT32_Q31 = 0x4,
  EAP_DATA_TYPE_FLOAT = 0x5,
  EAP_DATA_TYPE_COUNT = 0x6,
};

/* 228 */
typedef EAP_DataType EAP_DataType_0;

/* 229 */
typedef int32_0 EAP_MdrcInternalEventType_0;

/* 230 */
struct EAP_MdrcInternalEvent_1
{
  EAP_MdrcInternalEventType_0 type;
};

/* 231 */
typedef EAP_MdrcInternalEvent_1 EAP_MdrcInternalEvent_2;

/* 232 */
struct EAP_CompressionCurveImplDataInt32_1
{
  int32_0 levelLimits[5];
  int32_0 K[6];
  int16_0 AExp[6];
  int16_0 AFrac[6];
};

/* 233 */
typedef EAP_CompressionCurveImplDataInt32_1 EAP_CompressionCurveImplDataInt32_2;

/* 234 */
struct EAP_MultibandDrcInt32_InitInfo_1
{
  int32_0 sampleRate;
  int32_0 bandCount;
  int32_0 companderLookahead;
  int32_0 limiterLookahead;
  int32_0 downSamplingFactor;
  int32_0 avgShift;
  int32_0 maxBlockSize;
};

/* 235 */
typedef EAP_MultibandDrcInt32_InitInfo_1 EAP_MultibandDrcInt32_InitInfo_2;

/* 236 */
struct EAP_MdrcInternalEventCompressionCurveInt32_1
{
  EAP_MdrcInternalEvent_2 common;
  EAP_CompressionCurveImplDataInt32_2 curve;
  int32_0 band;
};

/* 237 */
typedef EAP_MdrcInternalEventCompressionCurveInt32_1 EAP_MdrcInternalEventCompressionCurveInt32_2;

/* 238 */
struct EAP_MdrcInternalEventBandCoeffInt32_1
{
  EAP_MdrcInternalEvent_2 common;
  int16_0 coeff;
  int16_0 dummy;
  int32_0 band;
};

/* 239 */
typedef EAP_MdrcInternalEventBandCoeffInt32_1 EAP_MdrcInternalEventBandCoeffInt32_2;

/* 240 */
typedef EAP_MdrcInternalEventBandCoeffInt32_2 EAP_MdrcInternalEventCompanderAttackCoeffInt32_0;

/* 241 */
typedef EAP_MdrcInternalEventBandCoeffInt32_2 EAP_MdrcInternalEventCompanderReleaseCoeffInt32_0;

/* 242 */
struct EAP_MdrcInternalEventCoeffInt32_1
{
  EAP_MdrcInternalEvent_2 common;
  int16_0 coeff;
  int16_0 dummy;
};

/* 243 */
typedef EAP_MdrcInternalEventCoeffInt32_1 EAP_MdrcInternalEventCoeffInt32_2;

/* 244 */
typedef EAP_MdrcInternalEventCoeffInt32_2 EAP_MdrcInternalEventLimiterAttackCoeffInt32_0;

/* 245 */
typedef EAP_MdrcInternalEventCoeffInt32_2 EAP_MdrcInternalEventLimiterReleaseCoeffInt32_0;

/* 246 */
struct EAP_MdrcInternalEventLimiterThresholdInt32_1
{
  EAP_MdrcInternalEvent_2 common;
  int32_0 threshold;
};

/* 247 */
typedef EAP_MdrcInternalEventLimiterThresholdInt32_1 EAP_MdrcInternalEventLimiterThresholdInt32_2;

/* 248 */
struct EAP_MdrcInternalEventCrossBandLinkInt32_1
{
  EAP_MdrcInternalEvent_2 common;
  int16_0 selfMult;
  int16_0 sumMult;
};

/* 249 */
typedef EAP_MdrcInternalEventCrossBandLinkInt32_1 EAP_MdrcInternalEventCrossBandLinkInt32_2;

/* 250 */
typedef int long;

/* 252 */
struct div_t
{
  int quot;
  int rem;
};

/* 251 */
typedef div_t div_t_0;

/* 253 */
struct ldiv_t
{
  long quot;
  long rem;
};

/* 254 */
typedef ldiv_t ldiv_t_0;

/* 255 */
struct lldiv_t
{
  long long quot;
  long long rem;
};

/* 256 */
typedef lldiv_t lldiv_t_0;

/* 257 */
struct _rand_state
{
  int __x[57];
};

/* 258 */
struct _ANSI_rand_state
{
  int __x[1];
};

/* 259 */
typedef int (*__heapprt)(void *, const unsigned __int8 *, ...);

/* 260 */
struct __sdiv32by16
{
  int quot;
  int rem;
};

/* 261 */
typedef __sdiv32by16 __sdiv32by16_0;

/* 262 */
struct __udiv32by16
{
  unsigned int quot;
  unsigned int rem;
};

/* 263 */
typedef __udiv32by16 __udiv32by16_0;

/* 264 */
struct __sdiv64by32
{
  int rem;
  int quot;
};

/* 265 */
typedef __sdiv64by32 __sdiv64by32_0;

/* 266 */
typedef float float_t;

/* 267 */
typedef double double_t;

/* 268 */
struct _Complex long_double
{
  float real;
  float imag;
};

/* 269 */
struct _Complex double
{
  float real;
  float imag;
};

/* 270 */
struct _Complex float
{
  short float real;
  short float imag;
};

/* 271 */
struct __va_list
{
  void *__ap;
};

/* 272 */
typedef __va_list __builtin_va_list;

/* 274 */
struct EAP_QmfStereoInt32FilterState_1
{
  int32_0 m_mem1;
  int32_0 m_mem2;
};

/* 273 */
typedef EAP_QmfStereoInt32FilterState_1 EAP_QmfStereoInt32FilterState_2;

/* 276 */
struct EAP_QmfStereoInt32_1
{
  int16_0 coeff01;
  int16_0 coeff02;
  int16_0 coeff11;
  int16_0 coeff12;
  EAP_QmfStereoInt32FilterState_2 m_leftAnalysisFilter0;
  EAP_QmfStereoInt32FilterState_2 m_leftAnalysisFilter1;
  EAP_QmfStereoInt32FilterState_2 m_rightAnalysisFilter0;
  EAP_QmfStereoInt32FilterState_2 m_rightAnalysisFilter1;
  EAP_QmfStereoInt32FilterState_2 m_leftSynthesisFilter0;
  EAP_QmfStereoInt32FilterState_2 m_leftSynthesisFilter1;
  EAP_QmfStereoInt32FilterState_2 m_rightSynthesisFilter0;
  EAP_QmfStereoInt32FilterState_2 m_rightSynthesisFilter1;
  int m_prevInputSampleCount;
  int m_analysisOdd;
  int m_prevOutputSampleCount;
  int m_synthesisOdd;
  int32_0 m_leftAnalysisMem;
  int32_0 m_rightAnalysisMem;
  int32_0 m_leftSynthesisMem;
  int32_0 m_rightSynthesisMem;
};

/* 275 */
typedef EAP_QmfStereoInt32_1 EAP_QmfStereoInt32_2;

/* 277 */
typedef char int8_t;

/* 278 */
typedef long long int64_t_0;

/* 279 */
typedef unsigned __int16 uint16_t;

/* 280 */
typedef char int_least8_t;

/* 281 */
typedef __int16 int_least16_t;

/* 282 */
typedef int int_least32_t;

/* 283 */
typedef long long int_least64_t;

/* 284 */
typedef unsigned __int8 uint_least8_t;

/* 285 */
typedef unsigned __int16 uint_least16_t;

/* 286 */
typedef unsigned int uint_least32_t;

/* 287 */
typedef unsigned __int64 uint_least64_t;

/* 288 */
typedef int int_fast8_t;

/* 289 */
typedef int int_fast16_t;

/* 290 */
typedef int int_fast32_t;

/* 291 */
typedef long long int_fast64_t;

/* 292 */
typedef unsigned int uint_fast8_t;

/* 293 */
typedef unsigned int uint_fast16_t;

/* 294 */
typedef unsigned int uint_fast32_t;

/* 295 */
typedef unsigned __int64 uint_fast64_t;

/* 296 */
typedef int intptr_t;

/* 297 */
typedef unsigned int uintptr_t;

/* 298 */
typedef long long intmax_t;

/* 299 */
typedef unsigned __int64 uintmax_t;

/* 300 */
typedef uint8_t poly8_t;

/* 301 */
typedef uint16_t poly16_t;

/* 302 */
typedef uint32_t __encoding_t;

/* 303 */
typedef float float32_t;

/* 304 */
struct __simd64_int8_t
{
  double __private;
};

/* 305 */
struct __library_simd64_int8_t
{
  int8_t a[8];
};

/* 306 */
typedef __simd64_int8_t int8x8_t;

/* 307 */
struct __simd64_int16_t
{
  double __private;
};

/* 308 */
struct __library_simd64_int16_t
{
  int16_t a[4];
};

/* 309 */
typedef __simd64_int16_t int16x4_t;

/* 310 */
struct __simd64_int32_t
{
  double __private;
};

/* 311 */
struct __library_simd64_int32_t
{
  int32_t a[2];
};

/* 312 */
typedef __simd64_int32_t int32x2_t;

/* 313 */
struct __simd64_int64_t
{
  double __private;
};

/* 314 */
struct __library_simd64_int64_t
{
  int64_t_0 a[1];
};

/* 315 */
typedef __simd64_int64_t int64x1_t;

/* 316 */
struct __simd64_uint8_t
{
  double __private;
};

/* 317 */
struct __library_simd64_uint8_t
{
  uint8_t a[8];
};

/* 318 */
typedef __simd64_uint8_t uint8x8_t;

/* 319 */
struct __simd64_uint16_t
{
  double __private;
};

/* 320 */
struct __library_simd64_uint16_t
{
  uint16_t a[4];
};

/* 321 */
typedef __simd64_uint16_t uint16x4_t;

/* 322 */
struct __simd64_uint32_t
{
  double __private;
};

/* 323 */
struct __library_simd64_uint32_t
{
  uint32_t a[2];
};

/* 324 */
typedef __simd64_uint32_t uint32x2_t;

/* 325 */
struct __simd64_uint64_t
{
  double __private;
};

/* 326 */
struct __library_simd64_uint64_t
{
  uint64_t a[1];
};

/* 327 */
typedef __simd64_uint64_t uint64x1_t;

/* 328 */
struct __simd64_float32_t
{
  double __private;
};

/* 329 */
struct __library_simd64_float32_t
{
  float32_t a[2];
};

/* 330 */
typedef __simd64_float32_t float32x2_t;

/* 331 */
struct __simd64_poly8_t
{
  double __private;
};

/* 332 */
struct __library_simd64_poly8_t
{
  poly8_t a[8];
};

/* 333 */
typedef __simd64_poly8_t poly8x8_t;

/* 334 */
struct __simd64_poly16_t
{
  double __private;
};

/* 335 */
struct __library_simd64_poly16_t
{
  poly16_t a[4];
};

/* 336 */
typedef __simd64_poly16_t poly16x4_t;

/* 337 */
struct __simd128_int8_t
{
  double __private1;
  double __private2;
};

/* 338 */
struct __library_simd128_int8_t
{
  int8_t a[16];
};

/* 339 */
typedef __simd128_int8_t int8x16_t;

/* 340 */
struct __simd128_int16_t
{
  double __private1;
  double __private2;
};

/* 341 */
struct __library_simd128_int16_t
{
  int16_t a[8];
};

/* 342 */
typedef __simd128_int16_t int16x8_t;

/* 343 */
struct __simd128_int32_t
{
  double __private1;
  double __private2;
};

/* 344 */
struct __library_simd128_int32_t
{
  int32_t a[4];
};

/* 345 */
typedef __simd128_int32_t int32x4_t;

/* 346 */
struct __simd128_int64_t
{
  double __private1;
  double __private2;
};

/* 347 */
struct __library_simd128_int64_t
{
  int64_t_0 a[2];
};

/* 348 */
typedef __simd128_int64_t int64x2_t;

/* 349 */
struct __simd128_uint8_t
{
  double __private1;
  double __private2;
};

/* 350 */
struct __library_simd128_uint8_t
{
  uint8_t a[16];
};

/* 351 */
typedef __simd128_uint8_t uint8x16_t;

/* 352 */
struct __simd128_uint16_t
{
  double __private1;
  double __private2;
};

/* 353 */
struct __library_simd128_uint16_t
{
  uint16_t a[8];
};

/* 354 */
typedef __simd128_uint16_t uint16x8_t;

/* 355 */
struct __simd128_uint32_t
{
  double __private1;
  double __private2;
};

/* 356 */
struct __library_simd128_uint32_t
{
  uint32_t a[4];
};

/* 357 */
typedef __simd128_uint32_t uint32x4_t;

/* 358 */
struct __simd128_uint64_t
{
  double __private1;
  double __private2;
};

/* 359 */
struct __library_simd128_uint64_t
{
  uint64_t a[2];
};

/* 360 */
typedef __simd128_uint64_t uint64x2_t;

/* 361 */
struct __simd128_float32_t
{
  double __private1;
  double __private2;
};

/* 362 */
struct __library_simd128_float32_t
{
  float32_t a[4];
};

/* 363 */
typedef __simd128_float32_t float32x4_t;

/* 364 */
struct __simd128_poly8_t
{
  double __private1;
  double __private2;
};

/* 365 */
struct __library_simd128_poly8_t
{
  poly8_t a[16];
};

/* 366 */
typedef __simd128_poly8_t poly8x16_t;

/* 367 */
struct __simd128_poly16_t
{
  double __private1;
  double __private2;
};

/* 368 */
struct __library_simd128_poly16_t
{
  poly16_t a[8];
};

/* 369 */
typedef __simd128_poly16_t poly16x8_t;

/* 370 */
struct __simd_array2_poly8x8_t
{
  __simd64_poly8_t val[2];
};

/* 371 */
struct __library_simd_array2_poly8x8_t
{
  __library_simd64_poly8_t val[2];
};

/* 372 */
typedef __simd_array2_poly8x8_t poly8x8x2_t;

/* 373 */
struct __simd_array3_poly8x8_t
{
  __simd64_poly8_t val[3];
};

/* 374 */
struct __library_simd_array3_poly8x8_t
{
  __library_simd64_poly8_t val[3];
};

/* 375 */
typedef __simd_array3_poly8x8_t poly8x8x3_t;

/* 376 */
struct __simd_array4_poly8x8_t
{
  __simd64_poly8_t val[4];
};

/* 377 */
struct __library_simd_array4_poly8x8_t
{
  __library_simd64_poly8_t val[4];
};

/* 378 */
typedef __simd_array4_poly8x8_t poly8x8x4_t;

/* 379 */
struct __simd_array2_poly8x16_t
{
  __simd128_poly8_t val[2];
};

/* 380 */
struct __library_simd_array2_poly8x16_t
{
  __library_simd128_poly8_t val[2];
};

/* 381 */
typedef __simd_array2_poly8x16_t poly8x16x2_t;

/* 382 */
struct __simd_array3_poly8x16_t
{
  __simd128_poly8_t val[3];
};

/* 383 */
struct __library_simd_array3_poly8x16_t
{
  __library_simd128_poly8_t val[3];
};

/* 384 */
typedef __simd_array3_poly8x16_t poly8x16x3_t;

/* 385 */
struct __simd_array4_poly8x16_t
{
  __simd128_poly8_t val[4];
};

/* 386 */
struct __library_simd_array4_poly8x16_t
{
  __library_simd128_poly8_t val[4];
};

/* 387 */
typedef __simd_array4_poly8x16_t poly8x16x4_t;

/* 388 */
struct __simd_array2_poly16x4_t
{
  __simd64_poly16_t val[2];
};

/* 389 */
struct __library_simd_array2_poly16x4_t
{
  __library_simd64_poly16_t val[2];
};

/* 390 */
typedef __simd_array2_poly16x4_t poly16x4x2_t;

/* 391 */
struct __simd_array3_poly16x4_t
{
  __simd64_poly16_t val[3];
};

/* 392 */
struct __library_simd_array3_poly16x4_t
{
  __library_simd64_poly16_t val[3];
};

/* 393 */
typedef __simd_array3_poly16x4_t poly16x4x3_t;

/* 394 */
struct __simd_array4_poly16x4_t
{
  __simd64_poly16_t val[4];
};

/* 395 */
struct __library_simd_array4_poly16x4_t
{
  __library_simd64_poly16_t val[4];
};

/* 396 */
typedef __simd_array4_poly16x4_t poly16x4x4_t;

/* 397 */
struct __simd_array2_poly16x8_t
{
  __simd128_poly16_t val[2];
};

/* 398 */
struct __library_simd_array2_poly16x8_t
{
  __library_simd128_poly16_t val[2];
};

/* 399 */
typedef __simd_array2_poly16x8_t poly16x8x2_t;

/* 400 */
struct __simd_array3_poly16x8_t
{
  __simd128_poly16_t val[3];
};

/* 401 */
struct __library_simd_array3_poly16x8_t
{
  __library_simd128_poly16_t val[3];
};

/* 402 */
typedef __simd_array3_poly16x8_t poly16x8x3_t;

/* 403 */
struct __simd_array4_poly16x8_t
{
  __simd128_poly16_t val[4];
};

/* 404 */
struct __library_simd_array4_poly16x8_t
{
  __library_simd128_poly16_t val[4];
};

/* 405 */
typedef __simd_array4_poly16x8_t poly16x8x4_t;

/* 406 */
struct __simd_array2_float32x2_t
{
  __simd64_float32_t val[2];
};

/* 407 */
struct __library_simd_array2_float32x2_t
{
  __library_simd64_float32_t val[2];
};

/* 408 */
typedef __simd_array2_float32x2_t float32x2x2_t;

/* 409 */
struct __simd_array3_float32x2_t
{
  __simd64_float32_t val[3];
};

/* 410 */
struct __library_simd_array3_float32x2_t
{
  __library_simd64_float32_t val[3];
};

/* 411 */
typedef __simd_array3_float32x2_t float32x2x3_t;

/* 412 */
struct __simd_array4_float32x2_t
{
  __simd64_float32_t val[4];
};

/* 413 */
struct __library_simd_array4_float32x2_t
{
  __library_simd64_float32_t val[4];
};

/* 414 */
typedef __simd_array4_float32x2_t float32x2x4_t;

/* 415 */
struct __simd_array2_float32x4_t
{
  __simd128_float32_t val[2];
};

/* 416 */
struct __library_simd_array2_float32x4_t
{
  __library_simd128_float32_t val[2];
};

/* 417 */
typedef __simd_array2_float32x4_t float32x4x2_t;

/* 418 */
struct __simd_array3_float32x4_t
{
  __simd128_float32_t val[3];
};

/* 419 */
struct __library_simd_array3_float32x4_t
{
  __library_simd128_float32_t val[3];
};

/* 420 */
typedef __simd_array3_float32x4_t float32x4x3_t;

/* 421 */
struct __simd_array4_float32x4_t
{
  __simd128_float32_t val[4];
};

/* 422 */
struct __library_simd_array4_float32x4_t
{
  __library_simd128_float32_t val[4];
};

/* 423 */
typedef __simd_array4_float32x4_t float32x4x4_t;

/* 424 */
struct __simd_array2_int8x8_t
{
  __simd64_int8_t val[2];
};

/* 425 */
struct __library_simd_array2_int8x8_t
{
  __library_simd64_int8_t val[2];
};

/* 426 */
typedef __simd_array2_int8x8_t int8x8x2_t;

/* 427 */
struct __simd_array3_int8x8_t
{
  __simd64_int8_t val[3];
};

/* 428 */
struct __library_simd_array3_int8x8_t
{
  __library_simd64_int8_t val[3];
};

/* 429 */
typedef __simd_array3_int8x8_t int8x8x3_t;

/* 430 */
struct __simd_array4_int8x8_t
{
  __simd64_int8_t val[4];
};

/* 431 */
struct __library_simd_array4_int8x8_t
{
  __library_simd64_int8_t val[4];
};

/* 432 */
typedef __simd_array4_int8x8_t int8x8x4_t;

/* 433 */
struct __simd_array2_int8x16_t
{
  __simd128_int8_t val[2];
};

/* 434 */
struct __library_simd_array2_int8x16_t
{
  __library_simd128_int8_t val[2];
};

/* 435 */
typedef __simd_array2_int8x16_t int8x16x2_t;

/* 436 */
struct __simd_array3_int8x16_t
{
  __simd128_int8_t val[3];
};

/* 437 */
struct __library_simd_array3_int8x16_t
{
  __library_simd128_int8_t val[3];
};

/* 438 */
typedef __simd_array3_int8x16_t int8x16x3_t;

/* 439 */
struct __simd_array4_int8x16_t
{
  __simd128_int8_t val[4];
};

/* 440 */
struct __library_simd_array4_int8x16_t
{
  __library_simd128_int8_t val[4];
};

/* 441 */
typedef __simd_array4_int8x16_t int8x16x4_t;

/* 442 */
struct __simd_array2_int16x4_t
{
  __simd64_int16_t val[2];
};

/* 443 */
struct __library_simd_array2_int16x4_t
{
  __library_simd64_int16_t val[2];
};

/* 444 */
typedef __simd_array2_int16x4_t int16x4x2_t;

/* 445 */
struct __simd_array3_int16x4_t
{
  __simd64_int16_t val[3];
};

/* 446 */
struct __library_simd_array3_int16x4_t
{
  __library_simd64_int16_t val[3];
};

/* 447 */
typedef __simd_array3_int16x4_t int16x4x3_t;

/* 448 */
struct __simd_array4_int16x4_t
{
  __simd64_int16_t val[4];
};

/* 449 */
struct __library_simd_array4_int16x4_t
{
  __library_simd64_int16_t val[4];
};

/* 450 */
typedef __simd_array4_int16x4_t int16x4x4_t;

/* 451 */
struct __simd_array2_int16x8_t
{
  __simd128_int16_t val[2];
};

/* 452 */
struct __library_simd_array2_int16x8_t
{
  __library_simd128_int16_t val[2];
};

/* 453 */
typedef __simd_array2_int16x8_t int16x8x2_t;

/* 454 */
struct __simd_array3_int16x8_t
{
  __simd128_int16_t val[3];
};

/* 455 */
struct __library_simd_array3_int16x8_t
{
  __library_simd128_int16_t val[3];
};

/* 456 */
typedef __simd_array3_int16x8_t int16x8x3_t;

/* 457 */
struct __simd_array4_int16x8_t
{
  __simd128_int16_t val[4];
};

/* 458 */
struct __library_simd_array4_int16x8_t
{
  __library_simd128_int16_t val[4];
};

/* 459 */
typedef __simd_array4_int16x8_t int16x8x4_t;

/* 460 */
struct __simd_array2_int32x2_t
{
  __simd64_int32_t val[2];
};

/* 461 */
struct __library_simd_array2_int32x2_t
{
  __library_simd64_int32_t val[2];
};

/* 462 */
typedef __simd_array2_int32x2_t int32x2x2_t;

/* 463 */
struct __simd_array3_int32x2_t
{
  __simd64_int32_t val[3];
};

/* 464 */
struct __library_simd_array3_int32x2_t
{
  __library_simd64_int32_t val[3];
};

/* 465 */
typedef __simd_array3_int32x2_t int32x2x3_t;

/* 466 */
struct __simd_array4_int32x2_t
{
  __simd64_int32_t val[4];
};

/* 467 */
struct __library_simd_array4_int32x2_t
{
  __library_simd64_int32_t val[4];
};

/* 468 */
typedef __simd_array4_int32x2_t int32x2x4_t;

/* 469 */
struct __simd_array2_int32x4_t
{
  __simd128_int32_t val[2];
};

/* 470 */
struct __library_simd_array2_int32x4_t
{
  __library_simd128_int32_t val[2];
};

/* 471 */
typedef __simd_array2_int32x4_t int32x4x2_t;

/* 472 */
struct __simd_array3_int32x4_t
{
  __simd128_int32_t val[3];
};

/* 473 */
struct __library_simd_array3_int32x4_t
{
  __library_simd128_int32_t val[3];
};

/* 474 */
typedef __simd_array3_int32x4_t int32x4x3_t;

/* 475 */
struct __simd_array4_int32x4_t
{
  __simd128_int32_t val[4];
};

/* 476 */
struct __library_simd_array4_int32x4_t
{
  __library_simd128_int32_t val[4];
};

/* 477 */
typedef __simd_array4_int32x4_t int32x4x4_t;

/* 478 */
struct __simd_array2_int64x1_t
{
  __simd64_int64_t val[2];
};

/* 479 */
struct __library_simd_array2_int64x1_t
{
  __library_simd64_int64_t val[2];
};

/* 480 */
typedef __simd_array2_int64x1_t int64x1x2_t;

/* 481 */
struct __simd_array3_int64x1_t
{
  __simd64_int64_t val[3];
};

/* 482 */
struct __library_simd_array3_int64x1_t
{
  __library_simd64_int64_t val[3];
};

/* 483 */
typedef __simd_array3_int64x1_t int64x1x3_t;

/* 484 */
struct __simd_array4_int64x1_t
{
  __simd64_int64_t val[4];
};

/* 485 */
struct __library_simd_array4_int64x1_t
{
  __library_simd64_int64_t val[4];
};

/* 486 */
typedef __simd_array4_int64x1_t int64x1x4_t;

/* 487 */
struct __simd_array2_int64x2_t
{
  __simd128_int64_t val[2];
};

/* 488 */
struct __library_simd_array2_int64x2_t
{
  __library_simd128_int64_t val[2];
};

/* 489 */
typedef __simd_array2_int64x2_t int64x2x2_t;

/* 490 */
struct __simd_array3_int64x2_t
{
  __simd128_int64_t val[3];
};

/* 491 */
struct __library_simd_array3_int64x2_t
{
  __library_simd128_int64_t val[3];
};

/* 492 */
typedef __simd_array3_int64x2_t int64x2x3_t;

/* 493 */
struct __simd_array4_int64x2_t
{
  __simd128_int64_t val[4];
};

/* 494 */
struct __library_simd_array4_int64x2_t
{
  __library_simd128_int64_t val[4];
};

/* 495 */
typedef __simd_array4_int64x2_t int64x2x4_t;

/* 496 */
struct __simd_array2_uint8x8_t
{
  __simd64_uint8_t val[2];
};

/* 497 */
struct __library_simd_array2_uint8x8_t
{
  __library_simd64_uint8_t val[2];
};

/* 498 */
typedef __simd_array2_uint8x8_t uint8x8x2_t;

/* 499 */
struct __simd_array3_uint8x8_t
{
  __simd64_uint8_t val[3];
};

/* 500 */
struct __library_simd_array3_uint8x8_t
{
  __library_simd64_uint8_t val[3];
};

/* 501 */
typedef __simd_array3_uint8x8_t uint8x8x3_t;

/* 502 */
struct __simd_array4_uint8x8_t
{
  __simd64_uint8_t val[4];
};

/* 503 */
struct __library_simd_array4_uint8x8_t
{
  __library_simd64_uint8_t val[4];
};

/* 504 */
typedef __simd_array4_uint8x8_t uint8x8x4_t;

/* 505 */
struct __simd_array2_uint8x16_t
{
  __simd128_uint8_t val[2];
};

/* 506 */
struct __library_simd_array2_uint8x16_t
{
  __library_simd128_uint8_t val[2];
};

/* 507 */
typedef __simd_array2_uint8x16_t uint8x16x2_t;

/* 508 */
struct __simd_array3_uint8x16_t
{
  __simd128_uint8_t val[3];
};

/* 509 */
struct __library_simd_array3_uint8x16_t
{
  __library_simd128_uint8_t val[3];
};

/* 510 */
typedef __simd_array3_uint8x16_t uint8x16x3_t;

/* 511 */
struct __simd_array4_uint8x16_t
{
  __simd128_uint8_t val[4];
};

/* 512 */
struct __library_simd_array4_uint8x16_t
{
  __library_simd128_uint8_t val[4];
};

/* 513 */
typedef __simd_array4_uint8x16_t uint8x16x4_t;

/* 514 */
struct __simd_array2_uint16x4_t
{
  __simd64_uint16_t val[2];
};

/* 515 */
struct __library_simd_array2_uint16x4_t
{
  __library_simd64_uint16_t val[2];
};

/* 516 */
typedef __simd_array2_uint16x4_t uint16x4x2_t;

/* 517 */
struct __simd_array3_uint16x4_t
{
  __simd64_uint16_t val[3];
};

/* 518 */
struct __library_simd_array3_uint16x4_t
{
  __library_simd64_uint16_t val[3];
};

/* 519 */
typedef __simd_array3_uint16x4_t uint16x4x3_t;

/* 520 */
struct __simd_array4_uint16x4_t
{
  __simd64_uint16_t val[4];
};

/* 521 */
struct __library_simd_array4_uint16x4_t
{
  __library_simd64_uint16_t val[4];
};

/* 522 */
typedef __simd_array4_uint16x4_t uint16x4x4_t;

/* 523 */
struct __simd_array2_uint16x8_t
{
  __simd128_uint16_t val[2];
};

/* 524 */
struct __library_simd_array2_uint16x8_t
{
  __library_simd128_uint16_t val[2];
};

/* 525 */
typedef __simd_array2_uint16x8_t uint16x8x2_t;

/* 526 */
struct __simd_array3_uint16x8_t
{
  __simd128_uint16_t val[3];
};

/* 527 */
struct __library_simd_array3_uint16x8_t
{
  __library_simd128_uint16_t val[3];
};

/* 528 */
typedef __simd_array3_uint16x8_t uint16x8x3_t;

/* 529 */
struct __simd_array4_uint16x8_t
{
  __simd128_uint16_t val[4];
};

/* 530 */
struct __library_simd_array4_uint16x8_t
{
  __library_simd128_uint16_t val[4];
};

/* 531 */
typedef __simd_array4_uint16x8_t uint16x8x4_t;

/* 532 */
struct __simd_array2_uint32x2_t
{
  __simd64_uint32_t val[2];
};

/* 533 */
struct __library_simd_array2_uint32x2_t
{
  __library_simd64_uint32_t val[2];
};

/* 534 */
typedef __simd_array2_uint32x2_t uint32x2x2_t;

/* 535 */
struct __simd_array3_uint32x2_t
{
  __simd64_uint32_t val[3];
};

/* 536 */
struct __library_simd_array3_uint32x2_t
{
  __library_simd64_uint32_t val[3];
};

/* 537 */
typedef __simd_array3_uint32x2_t uint32x2x3_t;

/* 538 */
struct __simd_array4_uint32x2_t
{
  __simd64_uint32_t val[4];
};

/* 539 */
struct __library_simd_array4_uint32x2_t
{
  __library_simd64_uint32_t val[4];
};

/* 540 */
typedef __simd_array4_uint32x2_t uint32x2x4_t;

/* 541 */
struct __simd_array2_uint32x4_t
{
  __simd128_uint32_t val[2];
};

/* 542 */
struct __library_simd_array2_uint32x4_t
{
  __library_simd128_uint32_t val[2];
};

/* 543 */
typedef __simd_array2_uint32x4_t uint32x4x2_t;

/* 544 */
struct __simd_array3_uint32x4_t
{
  __simd128_uint32_t val[3];
};

/* 545 */
struct __library_simd_array3_uint32x4_t
{
  __library_simd128_uint32_t val[3];
};

/* 546 */
typedef __simd_array3_uint32x4_t uint32x4x3_t;

/* 547 */
struct __simd_array4_uint32x4_t
{
  __simd128_uint32_t val[4];
};

/* 548 */
struct __library_simd_array4_uint32x4_t
{
  __library_simd128_uint32_t val[4];
};

/* 549 */
typedef __simd_array4_uint32x4_t uint32x4x4_t;

/* 550 */
struct __simd_array2_uint64x1_t
{
  __simd64_uint64_t val[2];
};

/* 551 */
struct __library_simd_array2_uint64x1_t
{
  __library_simd64_uint64_t val[2];
};

/* 552 */
typedef __simd_array2_uint64x1_t uint64x1x2_t;

/* 553 */
struct __simd_array3_uint64x1_t
{
  __simd64_uint64_t val[3];
};

/* 554 */
struct __library_simd_array3_uint64x1_t
{
  __library_simd64_uint64_t val[3];
};

/* 555 */
typedef __simd_array3_uint64x1_t uint64x1x3_t;

/* 556 */
struct __simd_array4_uint64x1_t
{
  __simd64_uint64_t val[4];
};

/* 557 */
struct __library_simd_array4_uint64x1_t
{
  __library_simd64_uint64_t val[4];
};

/* 558 */
typedef __simd_array4_uint64x1_t uint64x1x4_t;

/* 559 */
struct __simd_array2_uint64x2_t
{
  __simd128_uint64_t val[2];
};

/* 560 */
struct __library_simd_array2_uint64x2_t
{
  __library_simd128_uint64_t val[2];
};

/* 561 */
typedef __simd_array2_uint64x2_t uint64x2x2_t;

/* 562 */
struct __simd_array3_uint64x2_t
{
  __simd128_uint64_t val[3];
};

/* 563 */
struct __library_simd_array3_uint64x2_t
{
  __library_simd128_uint64_t val[3];
};

/* 564 */
typedef __simd_array3_uint64x2_t uint64x2x3_t;

/* 565 */
struct __simd_array4_uint64x2_t
{
  __simd128_uint64_t val[4];
};

/* 566 */
struct __library_simd_array4_uint64x2_t
{
  __library_simd128_uint64_t val[4];
};

/* 567 */
typedef __simd_array4_uint64x2_t uint64x2x4_t;

/* 569 */
struct EAP_WfirInt32_1
{
  int warpingShift;
  int32_0 w_left[1920];
  int32_0 w_right[1920];
};

/* 568 */
typedef EAP_WfirInt32_1 EAP_WfirInt32_2;

/* 570 */
typedef void (*EAP_WfirInt32_InitFptr)(EAP_WfirInt32_2 *, long);

/* 572 */
struct EAP_AverageAmplitudeInt32_1
{
  int32_0 m_memory;
  int m_downSamplingFactor;
  int m_downSamplingCounter;
  int m_shift;
};

/* 571 */
typedef EAP_AverageAmplitudeInt32_1 EAP_AverageAmplitudeInt32_2;

/* 573 */
struct EAP_AttRelFilterInt32_1
{
  int16_0 m_attCoeff;
  int16_0 m_relCoeff;
  int32_0 m_prevOutput;
};

/* 574 */
typedef EAP_AttRelFilterInt32_1 EAP_AttRelFilterInt32_2;

/* 576 */
struct EAP_MdrcDelaysAndGainsInt32_1
{
  int m_bandCount;
  int m_delay;
  int m_downSamplingFactor;
  int m_downSamplingCounter;
  int16_0 m_oneOverFactorQ15;
  int32_0 m_currGainQ15[5];
  int32_0 m_currDeltaQ15[5];
  int32_0 *m_memBuffers[12];
};

/* 575 */
typedef EAP_MdrcDelaysAndGainsInt32_1 EAP_MdrcDelaysAndGainsInt32_2;

/* 578 */
struct EAP_LimiterInt32_1
{
  int32_0 m_threshold;
  int16_0 m_attCoeff;
  int16_0 m_relCoeff;
  int32_0 m_prevGainQ30;
  int32_0 *m_lookaheadMem1;
  int32_0 *m_lookaheadMem2;
  int16_0 *m_scratch;
  int m_memSize;
};

/* 577 */
typedef EAP_LimiterInt32_1 EAP_LimiterInt32_2;

/* 579 */
struct EAP_WfirDummyFloat
{
  EAP_WfirInt32_2 common;
};

/* 580 */
typedef EAP_WfirDummyFloat EAP_WfirDummyInt32;

/* 581 */
struct EAP_WfirTwoBandsInt32
{
  EAP_WfirInt32_2 common;
  int32_0 m_leftMemory[3];
  int32_0 m_rightMemory[3];
  int32_0 m_leftCompMem[2];
  int32_0 m_rightCompMem[2];
};

/* 582 */
typedef EAP_WfirTwoBandsInt32 EAP_WfirTwoBandsInt32_0;

/* 583 */
struct EAP_WfirThreeBandsInt32
{
  EAP_WfirInt32_2 common;
  int32_0 m_leftMemory[7];
  int32_0 m_rightMemory[7];
  int32_0 m_leftCompMem[4];
  int32_0 m_rightCompMem[4];
};

/* 584 */
typedef EAP_WfirThreeBandsInt32 EAP_WfirThreeBandsInt32_0;

/* 586 */
struct EAP_WfirFourBandsInt32
{
  EAP_WfirInt32_2 common;
  int m_warpingShift2;
  int32_0 m_leftMemory[11];
  int32_0 m_rightMemory[11];
  int32_0 m_leftCompMem[6];
  int32_0 m_rightCompMem[6];
};

/* 585 */
typedef EAP_WfirFourBandsInt32 EAP_WfirFourBandsInt32_0;

/* 587 */
struct EAP_WfirFiveBandsInt32
{
  EAP_WfirInt32_2 common;
  int32_0 m_leftMemory[15];
  int32_0 m_rightMemory[15];
  int32_0 m_leftCompMem[8];
  int32_0 m_rightCompMem[8];
};

/* 588 */
typedef EAP_WfirFiveBandsInt32 EAP_WfirFiveBandsInt32_0;

/* 589 */
enum EAP_MultibandDrcInt32MemRecordsBase : __int32
{
  MEM_INSTANCE = 0x0,
  MEM_FILTERBANK = 0x1,
  MEM_AVG_FILTERS = 0x2,
  MEM_ATT_REL_FILTERS = 0x3,
  MEM_COMPRESSION_CURVES = 0x4,
  MEM_LIMITER_LOOKAHEAD1 = 0x5,
  MEM_LIMITER_LOOKAHEAD2 = 0x6,
  MEM_COMPANDER_LOOKAHEAD1 = 0x7,
  MEM_COMPANDER_LOOKAHEAD2 = 0x8,
  MEM_LEVEL_DATA = 0x9,
  MEM_SCRATCH1 = 0xA,
  MEM_SCRATCH2 = 0xB,
  MEM_SCRATCH3 = 0xC,
  MEM_SCRATCH4 = 0xD,
  MEM_SCRATCH5 = 0xE,
  MEM_SCRATCH6 = 0xF,
  MEM_RECORD_BASE_COUNT = 0x10,
};

/* 590 */
typedef EAP_MultibandDrcInt32MemRecordsBase EAP_MultibandDrcInt32MemRecordsBase_0;

/* 591 */
enum EAP_MultibandDrcInt32MemRecordsBand : __int32
{
  MEM_LOOKAHEAD_LEFT = 0x0,
  MEM_LOOKAHEAD_RIGHT = 0x1,
  MEM_FB_OUTPUT_LEFT = 0x2,
  MEM_FB_OUTPUT_RIGHT = 0x3,
  MEM_RECORD_BAND_COUNT = 0x4,
};

/* 592 */
typedef EAP_MultibandDrcInt32MemRecordsBand EAP_MultibandDrcInt32MemRecordsBand_0;

/* 593 */
struct EAP_MultibandDrcInt32_1
{
  EAP_QmfStereoInt32_2 qmf;
  EAP_WfirInt32_ProcessFptr filterbankFunc;
  EAP_WfirInt32_2 *filterbank;
  EAP_AverageAmplitudeInt32_2 *avgFilters;
  EAP_CompressionCurveImplDataInt32_2 *compressionCurves;
  EAP_AttRelFilterInt32_2 *attRelFilters;
  EAP_MdrcDelaysAndGainsInt32_2 gains;
  EAP_LimiterInt32_2 limiter;
  int32_0 bandCount;
  int16_0 m_xBandLinkSelf;
  int16_0 m_xBandLinkSum;
  int32_0 *m_companderLookahead[5];
  int32_0 *m_limiterLookahead1;
  int32_0 *m_limiterLookahead2;
  int32_0 *m_leftFilterbankOutputs[5];
  int32_0 *m_rightFilterbankOutputs[5];
  int32_0 *m_levelData[5];
  int32_0 *m_scratchMem1;
  int32_0 *m_scratchMem2;
  int32_0 *m_scratchMem3;
  int32_0 *m_scratchMem4;
  int32_0 *m_scratchMem5;
  int32_0 *m_scratchMem6;
};

/* 594 */
typedef EAP_MultibandDrcInt32_1 EAP_MultibandDrcInt32_2;

